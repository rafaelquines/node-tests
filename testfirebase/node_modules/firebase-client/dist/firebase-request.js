(function() {
  var FirebaseRequest, FirebaseResponse, q, qs, urlHelper,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  q = require("q");

  qs = require("querystring");

  urlHelper = require("url");

  FirebaseResponse = require("./firebase-response");

  FirebaseRequest = (function() {
    function FirebaseRequest(config) {
      if (config == null) {
        config = {};
      }
      this.process = __bind(this.process, this);
      this.url = config.url;
      this.auth = config.auth;
      this.request = require("request");
    }

    FirebaseRequest.prototype.get = function(path, query) {
      if (query == null) {
        query = {};
      }
      return this.process("GET", path, null, query);
    };

    FirebaseRequest.prototype.put = function(path, value, query) {
      if (value == null) {
        value = {};
      }
      if (query == null) {
        query = {};
      }
      return this.process("PUT", path, value, query);
    };

    FirebaseRequest.prototype.post = function(path, value, query) {
      if (value == null) {
        value = {};
      }
      if (query == null) {
        query = {};
      }
      return this.process("POST", path, value, query);
    };

    FirebaseRequest.prototype["delete"] = function(path, query) {
      if (query == null) {
        query = {};
      }
      return this.process("DELETE", path, null, query);
    };

    FirebaseRequest.prototype.patch = function(path, value, query) {
      if (value == null) {
        value = {};
      }
      if (query == null) {
        query = {};
      }
      return this.process("PATCH", path, value, query);
    };

    FirebaseRequest.prototype.buildUrl = function(path, query) {
      var url;
      if (path == null) {
        path = "";
      }
      if (query == null) {
        query = {};
      }
      path = "" + path + ".json";
      if (this.auth) {
        query.auth = this.auth;
      }
      url = urlHelper.resolve(this.url, path);
      if (Object.keys(query).length) {
        url += "?" + qs.stringify(query);
      }
      return url;
    };

    FirebaseRequest.prototype.process = function(method, path, data, query) {
      var deferred, opts;
      if (query == null) {
        query = {};
      }
      opts = {
        method: method
      };
      if (data) {
        opts.json = data;
      } else {
        opts.json = true;
      }
      opts.url = this.buildUrl(path, query);
      deferred = q.defer();
      this.request(opts, (function(_this) {
        return function(err, res) {
          if (err) {
            return deferred.reject(err);
          }
          return _this.handleResponse(deferred)(res);
        };
      })(this));
      return deferred.promise;
    };

    FirebaseRequest.prototype.handleResponse = function(deferred) {
      return function(res) {
        var response;
        response = new FirebaseResponse(res);
        if (response.success()) {
          return deferred.resolve(response.body);
        }
        if (response.clientError()) {
          return deferred.reject(response.clientError());
        }
        if (response.serverError()) {
          return deferred.reject(response.serverError());
        }
        return null;
      };
    };

    return FirebaseRequest;

  })();

  module.exports = FirebaseRequest;

}).call(this);
